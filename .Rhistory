html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
amount_comments
amount_comments
for(i in 1:1){ # last_episode
n_episode_comment_url <- paste0(n_comment_url, "&no=",i)
# .u_cbox_contents
n_comment_source <- read_html(n_episode_comment_url)
n_comment_source
# .u_cbox_count
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
amount_comments
n_comment_source
for(i in 1:1){ # last_episode
n_episode_comment_url <- paste0(n_comment_url, "&no=",i)
# .u_cbox_contents
n_comment_source <- read_html(n_episode_comment_url)
print(n_comment_source)
# .u_cbox_count
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
for(i in 1:1){ # last_episode
n_episode_comment_url <- paste0(n_comment_url, "&no=",i)
n_comment_source <- read_html(n_episode_comment_url)
print(comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
for(i in 1:1){ # last_episode
n_episode_comment_url <- paste0(n_comment_url, "&no=",i)
n_comment_source <- read_html(n_episode_comment_url)
print(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
for(i in 1:1){ # last_episode
n_episode_comment_url <- paste0(n_comment_url, "&no=",i)
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
amount_comments
library(httr)
library(rvest)
library(httr)
library(rvest)
title_id <- "703852" # 웹툰 개별 id, 벡터로 여러가지 담아야 함.
library(httr)
library(rvest)
title_id <- "703852" # 웹툰 개별 id, 벡터로 여러가지 담아야 함.
# title_id에 따른 반복문
n_webtoon_url <- paste0("https://comic.naver.com/webtoon/list.nhn?titleId=", title_id)
n_webtoon_source <- read_html(n_webtoon_url)
last_episode <- n_webtoon_source %>%
html_nodes(".v2+ tr a") %>%
html_text()
last_episode <- last_episode[[2]]
n_comment_url <- paste0("https://comic.naver.com/comment/comment.nhn?titleId=", title_id)
for(i in 1:1){ # last_episode
n_episode_comment_url <- paste0(n_comment_url, "&no=",i)
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
}
amount_comments
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_head > span") %>%
html_text()
amount_comments
amount_comments <- n_comment_source %>%
html_nodes("..u_cbox_count")
amount_comments
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count")
amount_comments
n_comment_source
n_webtoon_source
#for(i in 1:last_episode){
n_episode_comment_url <- paste0(n_comment_url, "&no=1") # ,i
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
source('C:/Users/Ovonel/Dropbox/2020_R_Programming_term_assignment/Term2_202021511_조민재.R', encoding = 'UTF-8', echo=TRUE)
amount_comments
title_id <- "703852" # 웹툰 개별 id, 벡터로 여러가지 담아야 함.
# title_id에 따른 반복문
n_webtoon_url <- paste0("https://comic.naver.com/webtoon/list.nhn?titleId=", title_id)
n_webtoon_source <- read_html(n_webtoon_url)
last_episode <- n_webtoon_source %>%
html_nodes(".v2+ tr a") %>%
html_text()
last_episode <- last_episode[[2]]
n_comment_url <- paste0("https://comic.naver.com/comment/comment.nhn?titleId=", title_id)
#for(i in 1:last_episode){
n_episode_comment_url <- paste0(n_comment_url, "&no=1") # ,i
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
amount_comments
#for(i in 1:last_episode){
n_episode_comment_url <- paste0(n_comment_url, "&no=1") # ,i
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(".u_cbox_count") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
amount_comments
#for(i in 1:last_episode){
n_episode_comment_url <- paste0(n_comment_url, "&no=1") # ,i
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes("body > div > div > .u_cbox_head > span") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
amount_comments
library(xml2)
library(httr)
library(xml2)
library(rvest)
title_id <- "703852" # 웹툰 개별 id, 벡터로 여러가지 담아야 함.
# title_id에 따른 반복문
n_webtoon_url <- paste0("https://comic.naver.com/webtoon/list.nhn?titleId=", title_id)
n_webtoon_source <- read_html(n_webtoon_url)
last_episode <- n_webtoon_source %>%
html_nodes(".v2+ tr a") %>%
html_text()
last_episode <- last_episode[[2]]
n_comment_url <- paste0("https://comic.naver.com/comment/comment.nhn?titleId=", title_id)
#for(i in 1:last_episode){
n_episode_comment_url <- paste0(n_comment_url, "&no=1") # ,i
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes("body > div > div > .u_cbox_head > span") %>%
html_text()
episode_comments <- n_comment_source %>%
html_nodes("._user_id_no_3to9K .u_cbox_contents") %>%
html_text()
amount_comments
res <- GET("http://www.racingpost.com/greyhounds/result_by_meeting_full.sd",
query=list(r_date="2015-12-26",
meeting_id=18))
doc <- read_html(content(res, as="text"))
doc
html_nodes(doc, ".black")
amount_comments <- n_comment_source %>%
html_nodes(css = ".u_cbox_count", xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]') %>%
html_text()
amount_comments <- n_comment_source %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]') %>%
html_text()
amount_comments
#for(i in 1:last_episode){
n_episode_comment_url <- paste0(n_comment_url, "&no=1") # ,i
n_comment_source <- read_html(n_episode_comment_url)
amount_comments <- n_comment_source %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]') %>%
html_text()
amount_comments
amount_comments
amount_comments <- n_comment_source %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]') #%>%
print(
amount_comments <- n_comment_source %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]') %>%
html_text()
)
print(
amount_comments <- n_comment_source %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]')
)
print(
amount_comments <- n_comment_source %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "u_cbox_count", " " ))]') %>%
html_text()
)
#install.packages("ggplot2")
#install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
info_df <- read.csv("info_df.csv") # 웹툰 정보를 담은 데이터프레임 불러옴.
str(info_df)
info_df$week_rank <- as.integer(info_df$week_rank)
all_genre <- table(info_df$genre)
label <- paste(names(all_genre), "\n", all_genre)
pie(all_genre, labels=label, radius=1.3)
split_genre_narrative <-  info_df$genre %>%
strsplit(split=",")
narrative_method <- c()
for(i in 1:length(split_genre_narrative)){
narrative_method <- append(narrative_method, split_genre_narrative[[i]][1])
}
narrative_method <- table(narrative_method)
label <- paste(names(narrative_method), "\n", narrative_method)
pie(narrative_method, labels=label, radius=0.8)
genre <- c()
for(i in 1:length(split_genre_narrative)){
genre <- append(genre, split_genre_narrative[[i]][2])
}
genre <- table(genre)
label <- paste(names(genre), "\n", genre)
pie(genre, labels=label, radius=1.2)
hot_toon <- info_df %>%
subset(week_rank <= 6) # 순위 6위 이내만 추출
hot_toon
hot_toon
info_df$week <- as.factor(info_df$week)
str(info_df)
hot_toon <- info_df %>%
subset(week_rank <= 6) # 각 주별 순위 6위 이내만 추출
hot_toon <- info_df %>%
subset(week_rank <= 6) # 각 주별 순위 6위 이내만 추출
split_genre_narrative <-  hot_toon$genre %>%
strsplit(split=",")
genre <- c()
for(i in 1:length(split_genre_narrative)){
genre <- append(genre, split_genre_narrative[[i]][2])
}
genre <- table(genre)
label <- paste(names(genre), "\n", genre)
pie(genre, labels=label, radius=1.2)
hot_toon <- info_df %>%
subset(week_rank <= 6) # 각 주별 순위 6위 이내만 추출
split_genre_narrative <-  hot_toon$genre %>%
strsplit(split=",")
genre <- c()
for(i in 1:length(split_genre_narrative)){
genre <- append(genre, split_genre_narrative[[i]][2])
}
genre <- table(genre)
label <- paste(names(genre), "\n", genre)
pie(genre, labels=label, radius=1.0)
hot_toon <- info_df %>%
subset(week_rank <= 6) # 각 주별 순위 6위 이내만 추출
split_genre_narrative <-  hot_toon$genre %>%
strsplit(split=",")
narrative_method <- c()
for(i in 1:length(split_genre_narrative)){
narrative_method <- append(narrative_method, split_genre_narrative[[i]][1])
}
narrative_method <- table(narrative_method)
label <- paste(names(narrative_method), "\n", genre)
pie(narrative_method, labels=label, radius=1.0)
hot_toon <- info_df %>%
subset(week_rank <= 6) # 각 주별 순위 6위 이내만 추출
split_genre_narrative <-  hot_toon$genre %>%
strsplit(split=",")
narrative_method <- c()
for(i in 1:length(split_genre_narrative)){
narrative_method <- append(narrative_method, split_genre_narrative[[i]][1])
}
narrative_method <- table(narrative_method)
label <- paste(names(narrative_method), "\n", narrative_method)
pie(narrative_method, labels=label, radius=1.0)
genre <- c()
for(i in 1:length(split_genre_narrative)){
genre <- append(genre, split_genre_narrative[[i]][2])
}
genre <- table(genre)
label <- paste(names(genre), "\n", genre)
pie(genre, labels=label, radius=1.0)
hot_toon <- info_df %>%
subset(week_rank <= 6) # 각 주별 순위 6위 이내만 추출
split_genre_narrative <-  hot_toon$genre %>%
strsplit(split=",")
narrative_method <- c()
for(i in 1:length(split_genre_narrative)){
narrative_method <- append(narrative_method, split_genre_narrative[[i]][1])
}
narrative_method <- table(narrative_method)
label <- paste(names(narrative_method), "\n", narrative_method)
pie(narrative_method, labels=label, radius=1.0)
genre <- c()
for(i in 1:length(split_genre_narrative)){
genre <- append(genre, split_genre_narrative[[i]][2])
}
genre <- table(genre)
label <- paste(names(genre), "\n", genre)
pie(genre, labels=label, radius=1.0)
# 총 별점 파악
week_source <- GET(paste0(main_url, query=list(week=week))) %>%
read_html()
(httr)
(httr)
(httr)
library(httr)
library(RSelenium)
library(RSelenium)
library(seleniumPipes)
library(tidyverse)
library(wdman)
clean_text <- function(arg_text){
arg_text <- gsub("\n", "", arg_text)
arg_text <- gsub("\t", "", arg_text)
arg_text <- trimws(arg_text)
return(arg_text)
}
cDrv <- chrome()
## 네이버 웹툰 크롤링
```{r}
title_source <- GET(main_url) %>%
read_html()
library(httr)
library(rvest)
library(RSelenium)
library(seleniumPipes)
library(tidyverse)
library(wdman)
clean_text <- function(arg_text){
arg_text <- gsub("\n", "", arg_text)
arg_text <- gsub("\t", "", arg_text)
arg_text <- trimws(arg_text)
return(arg_text)
}
cDrv <- chrome()
eCaps <- list(chromeOptions = list(
args = c('--headless', '--disable-gpu', '--window-size=1280,800')
))
remD <- remoteDriver(port = 4445L, browserName = "chrome", extraCapabilities = eCaps) # 포트번호 입력, 사용할 브라우저
remD$open() # 서버에 연결
# 댓글 담을 df
comment_df <- tibble(
id <- c(),
episode <- c(),
amount_comments <- c(),
episode_comments <- c(),
episode_user <- c(),
comments_good <- c()
)
colnames(comment_df) <- c("id", "episode", "amount_comments", "episode_comments", "episode_user", "comments_good")
# 평점 및 좋아요 참여자 담을 df
evaluate_df <- tibble(
id <- c(),
episode <- c(),
starpoint <- c(),
participant <- c(),
heart <- c()
)
colnames(evaluate_df) <- c("id",  "episode",  "starpoint",  "participant",  "heart")
# 웹툰 정보 담을 df
info_df <- tibble(
id <- c(),
title <- c(),
cartoonist <- c(),
genre <- c(),
last_episode <- c(),
week_rank <- c(),
week <- c(),
star_point <- c()
)
colnames(info_df) <- c("id", "title", "cartoonist", "genre", "last_episode", "week_rank", "week", "star_point")
# 변수
main_url <- "https://comic.naver.com/webtoon/weekday.nhn"
list_url <- "https://comic.naver.com/webtoon/list.nhn"
webtoon_url <- "https://comic.naver.com/webtoon/detail.nhn"
comment_url <- "https://comic.naver.com/comment/comment.nhn"
week_url <- "https://comic.naver.com/webtoon/weekdayList.nhn"
week_set <- c("mon", "tue", "wed", "thu", "fri", "sat", "sun") # 요일
title_source <- GET(main_url) %>%
read_html()
title_source <- GET(main_url) %>%
read_html()
# 웹툰 메인사이트
title_ids <- title_source %>%
html_nodes(".title") %>%
html_attrs()
## 웹툰 정보 크롤링
for(i_id in 1:length(title_ids)){ #
# 웹툰별 식별 id 가져오기
title_id <- title_ids[[i_id]][1]
title_id <- substr(title_id, 27, gregexpr("&weekday", title_id)[[1]] - 1) # /webtoon/list.nhn?titleId= 여기까지의 길이가 26이기에 여기에 1을 더한 값 부터, 그리고 &weekday가 포함된 인덱스까지에서 -1 까지의 문자열을 긁어오면 titleId 와 같은 값이 됨.
title_id <- title_id[[1]]
# 웹툰별 인기 순위 파악
title_rank <- title_ids[[i_id]][2]
title_rank <- substr(title_rank, 31, gregexpr("')", title_rank)[[1]] - 1)
title_rank <- title_rank[[1]]
# 요일
print(paste0("id = ", i_id))
if(title_rank == "1"){
cnt_week <- cnt_week + 1
}
week <- week_set[[cnt_week]]
# 웹툰 리스트 화면
list_source <- GET(list_url,
query=list(titleId=title_id)) %>%
read_html()
# 작가 파악
cartoonist <- list_source %>%
html_nodes(".wrt_nm") %>%
html_text()
cartoonist <- clean_text(cartoonist) # 전처리 필요
# 제목 파악
webtoon_title <- list_source %>%
html_nodes("h2") %>%
html_text()
webtoon_title <- clean_text(webtoon_title[[2]])
webtoon_title <- gsub(cartoonist, "", webtoon_title)
# 장르 파악
genre <- list_source %>%
html_nodes(".genre") %>%
html_text()
# 총 별점 파악
week_source <- GET(paste0(main_url, query=list(week=week))) %>%
read_html()
star_point <-  %>%
star_point <- week_source %>%
html_nodes(".rating_type strong") %>%
html_text
# 총 별점 파악
week_source <- GET(paste0(main_url, query=list(week=week))) %>%
read_html()
s
week <- week_set[[cnt_week]]
title_source <- GET(main_url) %>%
read_html()
# 웹툰 메인사이트
title_ids <- title_source %>%
html_nodes(".title") %>%
html_attrs()
cnt_week <- 0 # 요일 구분
## 웹툰 정보 크롤링
for(i_id in 1:length(title_ids)){ #
# 웹툰별 식별 id 가져오기
title_id <- title_ids[[i_id]][1]
title_id <- substr(title_id, 27, gregexpr("&weekday", title_id)[[1]] - 1) # /webtoon/list.nhn?titleId= 여기까지의 길이가 26이기에 여기에 1을 더한 값 부터, 그리고 &weekday가 포함된 인덱스까지에서 -1 까지의 문자열을 긁어오면 titleId 와 같은 값이 됨.
title_id <- title_id[[1]]
# 웹툰별 인기 순위 파악
title_rank <- title_ids[[i_id]][2]
title_rank <- substr(title_rank, 31, gregexpr("')", title_rank)[[1]] - 1)
title_rank <- title_rank[[1]]
# 요일
print(paste0("id = ", i_id))
if(title_rank == "1"){
cnt_week <- cnt_week + 1
}
week <- week_set[[cnt_week]]
# 웹툰 리스트 화면
list_source <- GET(list_url,
query=list(titleId=title_id)) %>%
read_html()
# 작가 파악
cartoonist <- list_source %>%
html_nodes(".wrt_nm") %>%
html_text()
cartoonist <- clean_text(cartoonist) # 전처리 필요
# 제목 파악
webtoon_title <- list_source %>%
html_nodes("h2") %>%
html_text()
webtoon_title <- clean_text(webtoon_title[[2]])
webtoon_title <- gsub(cartoonist, "", webtoon_title)
# 장르 파악
genre <- list_source %>%
html_nodes(".genre") %>%
html_text()
# 총 별점 파악
week_source <- GET(paste0(main_url, query=list(week=week))) %>%
read_html()
star_point <- week_source %>%
html_nodes(".rating_type strong") %>%
html_text
# 마지막화 파악
last_episode <- list_source %>%
html_nodes(".v2+ tr a") %>%
html_attrs()
if(!is_empty(last_episode)){
last_episode <- last_episode[[1]]["onclick"]
last_episode <- last_episode %>%
substr(35, gregexpr(")",  last_episode)[[1]][[1]] -2) %>%
as.integer()
}else{
last_episode <- 0
}
# df에 넣기
info_df <- add_row(info_df, id = title_id, title = webtoon_title, cartoonist = cartoonist, genre = genre, last_episode = last_episode, week_rank = title_rank, week = week, star_point = star_point)
}
